From 4678947f5b0a4313239c0324393ee6bd8f78fbef Mon Sep 17 00:00:00 2001
From: Silas Della Contrada <me@silenium-dev.net>
Date: Mon, 7 Apr 2025 18:34:07 +0200
Subject: [PATCH] feat: support custom input and output files

---
 gocover-cobertura.go      | 19 ++++++++++++++-
 gocover-cobertura_test.go | 50 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/gocover-cobertura.go b/gocover-cobertura.go
index 06fa9a3..8706d6a 100644
--- a/gocover-cobertura.go
+++ b/gocover-cobertura.go
@@ -51,7 +51,24 @@ func main() {
 		}
 	}
 
-	if err := convert(os.Stdin, os.Stdout, &ignore); err != nil {
+	inputFile := os.Stdin
+	if flag.NArg() > 0 {
+		inputFile, err = os.Open(flag.Arg(0))
+		if err != nil {
+			fatal("Failed to open input file: %s\n", err)
+		}
+		defer func() { _ = inputFile.Close() }()
+	}
+	outputFile := os.Stdout
+	if flag.NArg() > 1 {
+		outputFile, err = os.Create(flag.Arg(1))
+		if err != nil {
+			fatal("Failed to open output file: %s\n", err)
+		}
+		defer func() { _ = outputFile.Close() }()
+	}
+
+	if err := convert(inputFile, outputFile, &ignore); err != nil {
 		fatal("code coverage conversion failed: %s", err)
 	}
 }
diff --git a/gocover-cobertura_test.go b/gocover-cobertura_test.go
index 2a529a5..81eccb1 100644
--- a/gocover-cobertura_test.go
+++ b/gocover-cobertura_test.go
@@ -2,6 +2,7 @@ package main
 
 import (
 	"encoding/xml"
+	"flag"
 	"io"
 	"io/ioutil"
 	"os"
@@ -17,7 +18,21 @@ import (
 
 var SaveTestResults = false
 
+func mainCleanup(t *testing.T) {
+	origStdout := os.Stdout
+	origArgs := os.Args
+	t.Cleanup(
+		func() {
+			os.Stdout = origStdout
+			os.Args = origArgs
+			flag.CommandLine = flag.NewFlagSet(origArgs[0], flag.ExitOnError)
+		},
+	)
+}
+
 func Test_Main(t *testing.T) {
+	mainCleanup(t)
+
 	fname := filepath.Join(os.TempDir(), "stdout")
 	temp, err := os.Create(fname)
 	require.NoError(t, err)
@@ -31,6 +46,41 @@ func Test_Main(t *testing.T) {
 	require.Contains(t, outputString, coberturaDTDDecl)
 }
 
+func Test_MainCustomInput(t *testing.T) {
+	mainCleanup(t)
+
+	fname := filepath.Join(os.TempDir(), "stdout")
+	stdout, err := os.Create(fname)
+	require.NoError(t, err)
+	os.Stdout = stdout
+	os.Args = []string{"gocover-cobertura", "testdata/testdata_set.txt"}
+	main()
+	outputBytes, err := ioutil.ReadFile(fname)
+	require.NoError(t, err)
+
+	outputString := string(outputBytes)
+	require.Contains(t, outputString, xml.Header)
+	require.Contains(t, outputString, coberturaDTDDecl)
+	require.Contains(t, outputString, "func1")
+}
+
+func Test_MainCustomInputAndOutput(t *testing.T) {
+	mainCleanup(t)
+
+	fname := filepath.Join(os.TempDir(), "stdout")
+	_, err := os.Create(fname)
+	require.NoError(t, err)
+	os.Args = []string{"gocover-cobertura", "testdata/testdata_set.txt", fname}
+	main()
+	outputBytes, err := ioutil.ReadFile(fname)
+	require.NoError(t, err)
+
+	outputString := string(outputBytes)
+	require.Contains(t, outputString, xml.Header)
+	require.Contains(t, outputString, coberturaDTDDecl)
+	require.Contains(t, outputString, "func1")
+}
+
 func TestConvertParseProfilesError(t *testing.T) {
 	pipe2rd, pipe2wr := io.Pipe()
 	defer func() {
